{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport isFunction from '@stdlib/assert-is-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Until a test condition is true, invokes a function once for each element in a collection, iterating from right to left.\n*\n* ## Notes\n*\n* -   For dynamic array resizing, the only behavior made intentionally consistent with `untilEach` (iterating from left to right) is when elements are pushed onto the beginning (end) of an array. In other words, for `untilEach()`, `[].push()` behavior is consistent with `untilEachRight()` `[].unshift()` behavior.\n*\n* @param {Collection} collection - input collection\n* @param {Function} predicate - function which indicates whether to stop iterating over a collection\n* @param {Function} fcn - function to invoke\n* @param {*} [thisArg] - execution context for the applied function\n* @throws {TypeError} first argument must be a collection\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} third argument must be a function\n* @returns {Collection} input collection\n*\n* @example\n* function predicate( v, index, collection ) {\n*     return ( v !== v );\n* }\n*\n* function log( v, index, collection ) {\n*     console.log( '%s: %d', index, v );\n* }\n*\n* var arr = [ 1, NaN, 2, 3, 4, 5 ];\n*\n* untilEachRight( arr, predicate, log );\n*/\nfunction untilEachRight( collection, predicate, fcn, thisArg ) {\n\tvar len;\n\tvar i;\n\tif ( !isCollection( collection ) ) {\n\t\tthrow new TypeError( format( '0lwBO', collection ) );\n\t}\n\tif ( !isFunction( predicate ) ) {\n\t\tthrow new TypeError( format( '0lw2S', predicate ) );\n\t}\n\tif ( !isFunction( fcn ) ) {\n\t\tthrow new TypeError( format( '0lw3Z', fcn ) );\n\t}\n\tlen = collection.length;\n\ti = len - 1;\n\twhile (\n\t\ti >= 0 &&\n\t\t!predicate( collection[ i ], i, collection )\n\t) {\n\t\tfcn.call( thisArg, collection[ i ], i, collection );\n\n\t\t// Account for dynamically resizing a collection...\n\t\tif ( len !== collection.length ) {\n\t\t\ti += ( collection.length - len );\n\t\t\tlen = collection.length;\n\t\t}\n\t\ti -= 1;\n\t}\n\treturn collection;\n}\n\n\n// EXPORTS //\n\nexport default untilEachRight;\n"],"names":["untilEachRight","collection","predicate","fcn","thisArg","len","i","isCollection","TypeError","format","isFunction","length","call"],"mappings":";;+QA0DA,SAASA,EAAgBC,EAAYC,EAAWC,EAAKC,GACpD,IAAIC,EACAC,EACJ,IAAMC,EAAcN,GACnB,MAAM,IAAIO,UAAWC,EAAQ,QAASR,IAEvC,IAAMS,EAAYR,GACjB,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAEvC,IAAMQ,EAAYP,GACjB,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAIvC,IADAG,GADAD,EAAMJ,EAAWU,QACP,EAETL,GAAK,IACJJ,EAAWD,EAAYK,GAAKA,EAAGL,IAEhCE,EAAIS,KAAMR,EAASH,EAAYK,GAAKA,EAAGL,GAGlCI,IAAQJ,EAAWU,SACvBL,GAAOL,EAAWU,OAASN,EAC3BA,EAAMJ,EAAWU,QAElBL,GAAK,EAEN,OAAOL,CACR"}